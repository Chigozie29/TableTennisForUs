package tabletennis;

import com.github.lgooddatepicker.components.DatePickerSettings;
import java.sql.*;
import java.time.LocalDate;
import javax.swing.JOptionPane;

public class MainGUI extends javax.swing.JFrame {
    
    //declare an object of CompetitionManager class
    CompetitionManager cm;
    
    //create variables which is used by some different methods
    private boolean test = false;
    int check = 0;

    /**
     * Creates new form MainGUI
     */
    public MainGUI() {
        initComponents();
        
        //make search button enabled when GUI is opened
        btnSearch.setEnabled(false);
        
        //Limit date
        DatePickerSettings settings = dpkDate.getSettings();
        LocalDate now = LocalDate.now();
        LocalDate EndDate = now.plusMonths(36);
        settings.setDateRangeLimits(now, EndDate);
        
        try{
            //instantiate variables called cm
            cm = new CompetitionManager();
        }catch(SQLException ex){
            
            //display error message
            lblViewCompetitionsError.setText("Cannot load Competitions");
        }
    }
    
    private static String addSpaces(String s, int width)
    {
        //Declare and initialise variable
        String newString = "";
        
        //Add spaces till the String and spaces are as long as "width"
        
        for(int i = 0; i< width - s.length();i++)
        {
            //Add a space
            newString +=" ";
        }
        
        //return the spaces as a 'newString'
        return newString;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabTableTennis = new javax.swing.JTabbedPane();
        pnlViewCompetitions = new javax.swing.JPanel();
        btnShowAllCompetitions = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaViewCompetitions = new javax.swing.JTextArea();
        lblBackground1 = new javax.swing.JLabel();
        lblViewCompetitionsError = new javax.swing.JLabel();
        pnlViewParticipants = new javax.swing.JPanel();
        btnShowAllParticipants = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaShowAllParticipants = new javax.swing.JTextArea();
        lblBackground2 = new javax.swing.JLabel();
        lblViewParticipantsError = new javax.swing.JLabel();
        pnlAddNewCompetition = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblPrize = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txfTitle = new javax.swing.JTextField();
        txfPrize = new javax.swing.JTextField();
        dpkDate = new com.github.lgooddatepicker.components.DatePicker();
        cmbLocation = new javax.swing.JComboBox<>();
        btnAddCompetition = new javax.swing.JButton();
        lblBackground3 = new javax.swing.JLabel();
        lblAddNewCompetitionError = new javax.swing.JLabel();
        pnlAddNewParticipant = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblSurname = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txfName = new javax.swing.JTextField();
        txfSurname = new javax.swing.JTextField();
        txfUsername = new javax.swing.JTextField();
        pwfPassword = new javax.swing.JPasswordField();
        btnAddParticipant = new javax.swing.JButton();
        lblBaground4 = new javax.swing.JLabel();
        lblAddNewParticipantError = new javax.swing.JLabel();
        pnlAddParticipantsToCompetitions = new javax.swing.JPanel();
        lblCompetitionID = new javax.swing.JLabel();
        txfCompetitionID = new javax.swing.JTextField();
        btnCheck = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaCheckAllParticipants = new javax.swing.JTextArea();
        lblNewParticipationID = new javax.swing.JLabel();
        txfNewParticipantID = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        lblBackground5 = new javax.swing.JLabel();
        lblAddParticipantsToCompetitionsError = new javax.swing.JLabel();
        pnlUpdateResults = new javax.swing.JPanel();
        lblCompetitionID1 = new javax.swing.JLabel();
        lblParticipantID1 = new javax.swing.JLabel();
        lblPoints = new javax.swing.JLabel();
        txfCompetitionID1 = new javax.swing.JTextField();
        txfParticipantID1 = new javax.swing.JTextField();
        txfPoints = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        lblBackground6 = new javax.swing.JLabel();
        lblUpdateResultsError = new javax.swing.JLabel();
        pnlViewBestParticipants = new javax.swing.JPanel();
        lblCompetitionID2 = new javax.swing.JLabel();
        txfCompetitionID2 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaBestParticipants = new javax.swing.JTextArea();
        lblBackground7 = new javax.swing.JLabel();
        lblViewBestParticipantsError = new javax.swing.JLabel();
        pnlHelp = new javax.swing.JPanel();
        lblHelp = new javax.swing.JLabel();
        btnHelpViewCompetitions = new javax.swing.JButton();
        btnHelpViewParticipants = new javax.swing.JButton();
        btnHelpAddNewParticipant = new javax.swing.JButton();
        btnHelpAddParticipantsToCompetitions = new javax.swing.JButton();
        btnHelpUpdateResults = new javax.swing.JButton();
        btnHelpViewBestParticipants = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txaHelp = new javax.swing.JTextArea();
        lblBackground8 = new javax.swing.JLabel();
        lblHelpError = new javax.swing.JLabel();
        pnlLogOut = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Table tennis Tournament");

        tabTableTennis.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        pnlViewCompetitions.setLayout(null);

        btnShowAllCompetitions.setText("Show All Competitions");
        btnShowAllCompetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllCompetitionsActionPerformed(evt);
            }
        });
        pnlViewCompetitions.add(btnShowAllCompetitions);
        btnShowAllCompetitions.setBounds(518, 55, 151, 23);

        txaViewCompetitions.setColumns(20);
        txaViewCompetitions.setRows(5);
        jScrollPane1.setViewportView(txaViewCompetitions);

        pnlViewCompetitions.add(jScrollPane1);
        jScrollPane1.setBounds(68, 122, 965, 364);

        lblBackground1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT3.jpg"))); // NOI18N
        lblBackground1.setText("jLabel1");
        pnlViewCompetitions.add(lblBackground1);
        lblBackground1.setBounds(0, 0, 1100, 570);
        pnlViewCompetitions.add(lblViewCompetitionsError);
        lblViewCompetitionsError.setBounds(560, 510, 0, 0);

        tabTableTennis.addTab("View Competitions", pnlViewCompetitions);

        pnlViewParticipants.setLayout(null);

        btnShowAllParticipants.setText("Show All Participants");
        btnShowAllParticipants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllParticipantsActionPerformed(evt);
            }
        });
        pnlViewParticipants.add(btnShowAllParticipants);
        btnShowAllParticipants.setBounds(500, 60, 141, 23);

        txaShowAllParticipants.setColumns(20);
        txaShowAllParticipants.setRows(5);
        jScrollPane2.setViewportView(txaShowAllParticipants);

        pnlViewParticipants.add(jScrollPane2);
        jScrollPane2.setBounds(66, 124, 958, 380);

        lblBackground2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT3.jpg"))); // NOI18N
        lblBackground2.setText("jLabel2");
        pnlViewParticipants.add(lblBackground2);
        lblBackground2.setBounds(0, 0, 1100, 580);

        lblViewParticipantsError.setForeground(new java.awt.Color(255, 0, 51));
        pnlViewParticipants.add(lblViewParticipantsError);
        lblViewParticipantsError.setBounds(490, 520, 0, 0);

        tabTableTennis.addTab("View Participants", pnlViewParticipants);

        pnlAddNewCompetition.setLayout(null);

        lblTitle.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Title");
        pnlAddNewCompetition.add(lblTitle);
        lblTitle.setBounds(82, 88, 57, 23);

        lblLocation.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblLocation.setForeground(new java.awt.Color(255, 255, 255));
        lblLocation.setText("Location");
        pnlAddNewCompetition.add(lblLocation);
        lblLocation.setBounds(82, 138, 100, 23);

        lblPrize.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblPrize.setForeground(new java.awt.Color(255, 255, 255));
        lblPrize.setText("Prize");
        pnlAddNewCompetition.add(lblPrize);
        lblPrize.setBounds(82, 196, 63, 23);

        lblDate.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setText("Date");
        pnlAddNewCompetition.add(lblDate);
        lblDate.setBounds(82, 253, 70, 23);
        pnlAddNewCompetition.add(txfTitle);
        txfTitle.setBounds(275, 91, 213, 22);
        pnlAddNewCompetition.add(txfPrize);
        txfPrize.setBounds(275, 199, 213, 22);
        pnlAddNewCompetition.add(dpkDate);
        dpkDate.setBounds(275, 257, 213, 21);

        cmbLocation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "University of Cape Town", "Curro Century City", "Fairmont High School", "Rondebosch", "Durban ICC", "University of Pretoria" }));
        pnlAddNewCompetition.add(cmbLocation);
        cmbLocation.setBounds(275, 141, 213, 22);

        btnAddCompetition.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnAddCompetition.setText("Add Competition");
        btnAddCompetition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCompetitionActionPerformed(evt);
            }
        });
        pnlAddNewCompetition.add(btnAddCompetition);
        btnAddCompetition.setBounds(747, 478, 210, 30);

        lblBackground3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT4.jpg"))); // NOI18N
        lblBackground3.setText("jLabel5");
        pnlAddNewCompetition.add(lblBackground3);
        lblBackground3.setBounds(-3, -4, 1090, 580);

        lblAddNewCompetitionError.setForeground(new java.awt.Color(255, 0, 51));
        pnlAddNewCompetition.add(lblAddNewCompetitionError);
        lblAddNewCompetitionError.setBounds(90, 480, 0, 0);

        tabTableTennis.addTab("Add New Competition", pnlAddNewCompetition);

        pnlAddNewParticipant.setLayout(null);

        lblName.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Name");
        pnlAddNewParticipant.add(lblName);
        lblName.setBounds(87, 102, 58, 23);

        lblSurname.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblSurname.setForeground(new java.awt.Color(255, 255, 255));
        lblSurname.setText("Surname");
        pnlAddNewParticipant.add(lblSurname);
        lblSurname.setBounds(87, 160, 90, 23);

        lblUsername.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username");
        pnlAddNewParticipant.add(lblUsername);
        lblUsername.setBounds(87, 220, 103, 23);

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Password");
        pnlAddNewParticipant.add(jLabel3);
        jLabel3.setBounds(87, 284, 103, 23);
        pnlAddNewParticipant.add(txfName);
        txfName.setBounds(337, 105, 248, 22);
        pnlAddNewParticipant.add(txfSurname);
        txfSurname.setBounds(337, 163, 248, 22);
        pnlAddNewParticipant.add(txfUsername);
        txfUsername.setBounds(337, 220, 248, 22);
        pnlAddNewParticipant.add(pwfPassword);
        pwfPassword.setBounds(337, 287, 248, 22);

        btnAddParticipant.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        btnAddParticipant.setText("Add Participant");
        btnAddParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParticipantActionPerformed(evt);
            }
        });
        pnlAddNewParticipant.add(btnAddParticipant);
        btnAddParticipant.setBounds(744, 460, 200, 30);

        lblBaground4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT4.jpg"))); // NOI18N
        lblBaground4.setText("jLabel4");
        pnlAddNewParticipant.add(lblBaground4);
        lblBaground4.setBounds(0, 0, 1090, 580);

        lblAddNewParticipantError.setForeground(new java.awt.Color(255, 0, 0));
        lblAddNewParticipantError.setText("jLabel2");
        pnlAddNewParticipant.add(lblAddNewParticipantError);
        lblAddNewParticipantError.setBounds(80, 450, 38, 16);

        tabTableTennis.addTab("Add New Participant", pnlAddNewParticipant);

        pnlAddParticipantsToCompetitions.setLayout(null);

        lblCompetitionID.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblCompetitionID.setForeground(new java.awt.Color(255, 255, 255));
        lblCompetitionID.setText("Competition ID");
        pnlAddParticipantsToCompetitions.add(lblCompetitionID);
        lblCompetitionID.setBounds(403, 52, 160, 23);
        pnlAddParticipantsToCompetitions.add(txfCompetitionID);
        txfCompetitionID.setBounds(593, 49, 144, 22);

        btnCheck.setText("Check");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });
        pnlAddParticipantsToCompetitions.add(btnCheck);
        btnCheck.setBounds(767, 49, 72, 23);

        txaCheckAllParticipants.setColumns(20);
        txaCheckAllParticipants.setRows(5);
        jScrollPane3.setViewportView(txaCheckAllParticipants);

        pnlAddParticipantsToCompetitions.add(jScrollPane3);
        jScrollPane3.setBounds(255, 150, 813, 214);

        lblNewParticipationID.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblNewParticipationID.setForeground(new java.awt.Color(255, 255, 255));
        lblNewParticipationID.setText("New Participant ID");
        pnlAddParticipantsToCompetitions.add(lblNewParticipationID);
        lblNewParticipationID.setBounds(610, 480, 210, 23);
        pnlAddParticipantsToCompetitions.add(txfNewParticipantID);
        txfNewParticipantID.setBounds(850, 480, 140, 22);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlAddParticipantsToCompetitions.add(btnAdd);
        btnAdd.setBounds(1030, 480, 116, 23);

        lblBackground5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT4.jpg"))); // NOI18N
        pnlAddParticipantsToCompetitions.add(lblBackground5);
        lblBackground5.setBounds(-3, -4, 1330, 580);

        lblAddParticipantsToCompetitionsError.setForeground(new java.awt.Color(255, 0, 51));
        pnlAddParticipantsToCompetitions.add(lblAddParticipantsToCompetitionsError);
        lblAddParticipantsToCompetitionsError.setBounds(680, 410, 0, 0);

        tabTableTennis.addTab("Add Participants to Competitions", pnlAddParticipantsToCompetitions);

        pnlUpdateResults.setLayout(null);

        lblCompetitionID1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCompetitionID1.setForeground(new java.awt.Color(255, 255, 255));
        lblCompetitionID1.setText("Competition ID");
        pnlUpdateResults.add(lblCompetitionID1);
        lblCompetitionID1.setBounds(700, 202, 150, 25);

        lblParticipantID1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblParticipantID1.setForeground(new java.awt.Color(255, 255, 255));
        lblParticipantID1.setText("Participant ID");
        pnlUpdateResults.add(lblParticipantID1);
        lblParticipantID1.setBounds(711, 255, 140, 25);

        lblPoints.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPoints.setForeground(new java.awt.Color(255, 255, 255));
        lblPoints.setText("Points");
        pnlUpdateResults.add(lblPoints);
        lblPoints.setBounds(708, 309, 110, 25);
        pnlUpdateResults.add(txfCompetitionID1);
        txfCompetitionID1.setBounds(869, 199, 131, 22);
        pnlUpdateResults.add(txfParticipantID1);
        txfParticipantID1.setBounds(869, 252, 131, 22);
        pnlUpdateResults.add(txfPoints);
        txfPoints.setBounds(869, 306, 131, 22);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlUpdateResults.add(btnUpdate);
        btnUpdate.setBounds(1045, 306, 114, 23);

        lblBackground6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT5.jpg"))); // NOI18N
        lblBackground6.setText("jLabel1");
        pnlUpdateResults.add(lblBackground6);
        lblBackground6.setBounds(-3, -4, 1330, 580);

        lblUpdateResultsError.setForeground(new java.awt.Color(255, 0, 51));
        pnlUpdateResults.add(lblUpdateResultsError);
        lblUpdateResultsError.setBounds(260, 430, 0, 0);

        tabTableTennis.addTab("Update Results", pnlUpdateResults);

        pnlViewBestParticipants.setLayout(null);

        lblCompetitionID2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCompetitionID2.setForeground(new java.awt.Color(255, 255, 255));
        lblCompetitionID2.setText("Competition ID");
        pnlViewBestParticipants.add(lblCompetitionID2);
        lblCompetitionID2.setBounds(649, 107, 150, 25);

        txfCompetitionID2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfCompetitionID2KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txfCompetitionID2KeyTyped(evt);
            }
        });
        pnlViewBestParticipants.add(txfCompetitionID2);
        txfCompetitionID2.setBounds(834, 111, 133, 22);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlViewBestParticipants.add(btnSearch);
        btnSearch.setBounds(1015, 111, 72, 23);

        txaBestParticipants.setColumns(20);
        txaBestParticipants.setRows(5);
        jScrollPane4.setViewportView(txaBestParticipants);

        pnlViewBestParticipants.add(jScrollPane4);
        jScrollPane4.setBounds(687, 203, 439, 206);

        lblBackground7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT6.jpg"))); // NOI18N
        lblBackground7.setText("jLabel1");
        pnlViewBestParticipants.add(lblBackground7);
        lblBackground7.setBounds(0, 0, 1330, 560);

        lblViewBestParticipantsError.setForeground(new java.awt.Color(255, 0, 51));
        pnlViewBestParticipants.add(lblViewBestParticipantsError);
        lblViewBestParticipantsError.setBounds(690, 40, 0, 0);

        tabTableTennis.addTab("VIew Best Participants", pnlViewBestParticipants);

        pnlHelp.setLayout(null);

        lblHelp.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblHelp.setForeground(new java.awt.Color(255, 255, 255));
        lblHelp.setText("Click on the button below to find help on a particular topic:");
        pnlHelp.add(lblHelp);
        lblHelp.setBounds(433, 87, 535, 25);

        btnHelpViewCompetitions.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpViewCompetitions.setText("View Competitions");
        btnHelpViewCompetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpViewCompetitionsActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpViewCompetitions);
        btnHelpViewCompetitions.setBounds(433, 151, 294, 32);

        btnHelpViewParticipants.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpViewParticipants.setText("View Participants");
        btnHelpViewParticipants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpViewParticipantsActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpViewParticipants);
        btnHelpViewParticipants.setBounds(433, 201, 294, 32);

        btnHelpAddNewParticipant.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpAddNewParticipant.setText("Add new Participant");
        btnHelpAddNewParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpAddNewParticipantActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpAddNewParticipant);
        btnHelpAddNewParticipant.setBounds(433, 255, 294, 32);

        btnHelpAddParticipantsToCompetitions.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpAddParticipantsToCompetitions.setText("Add Participant to Competitions");
        btnHelpAddParticipantsToCompetitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpAddParticipantsToCompetitionsActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpAddParticipantsToCompetitions);
        btnHelpAddParticipantsToCompetitions.setBounds(433, 305, 300, 32);

        btnHelpUpdateResults.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpUpdateResults.setText("Update Results");
        btnHelpUpdateResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpUpdateResultsActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpUpdateResults);
        btnHelpUpdateResults.setBounds(433, 355, 294, 32);

        btnHelpViewBestParticipants.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnHelpViewBestParticipants.setText("View Best Participants");
        btnHelpViewBestParticipants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpViewBestParticipantsActionPerformed(evt);
            }
        });
        pnlHelp.add(btnHelpViewBestParticipants);
        btnHelpViewBestParticipants.setBounds(433, 405, 294, 32);

        txaHelp.setColumns(20);
        txaHelp.setRows(5);
        jScrollPane5.setViewportView(txaHelp);

        pnlHelp.add(jScrollPane5);
        jScrollPane5.setBounds(739, 151, 337, 286);

        lblBackground8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tabletennis/TT1.jpg"))); // NOI18N
        lblBackground8.setText("jLabel2");
        pnlHelp.add(lblBackground8);
        lblBackground8.setBounds(-3, -4, 1410, 560);
        pnlHelp.add(lblHelpError);
        lblHelpError.setBounds(630, 490, 0, 0);

        tabTableTennis.addTab("Help", pnlHelp);

        btnLogOut.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlLogOutLayout = new javax.swing.GroupLayout(pnlLogOut);
        pnlLogOut.setLayout(pnlLogOutLayout);
        pnlLogOutLayout.setHorizontalGroup(
            pnlLogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogOutLayout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1074, Short.MAX_VALUE))
        );
        pnlLogOutLayout.setVerticalGroup(
            pnlLogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLogOutLayout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(btnLogOut)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        tabTableTennis.addTab("Log Out", pnlLogOut);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTableTennis)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTableTennis)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnHelpAddNewParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpAddNewParticipantActionPerformed
        // TODO add your handling code here:
        String topic = evt.getActionCommand();
        try{
            //Extract data from database called tblHelp
            ResultSet rs = CompetitionManager.db.queryDB
    ("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
            
            rs.next();
            //get descrption and save it as string value
            String d = rs.getString("Description");
            
            //display outcome
            txaHelp.setText(d);
            
        }catch(SQLException ex){
            //display error message
            lblHelpError.setText("Cannot access Help");
        }
    }//GEN-LAST:event_btnHelpAddNewParticipantActionPerformed

    private void btnAddParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParticipantActionPerformed
        // TODO add your handling code here:
        //Extract input
       String name = txfName.getText();
       String surname = txfSurname.getText();
       String username = txfUsername.getText();
       String password = pwfPassword.getText();
       
       
       //Declare string array to store Participant in the database
       String[] d = new String[5000];
       
       /*Declare integer value 'size' to trace how many records are 
       in the array 'd*/
       int size = 0;
       
       /*Declare boolean value 'check' to determine that it is 
       available to add new participant*/
       boolean check = true;
       
       //check user typed at least one character in all fields
       if(name.length()==0 | surname.length() == 0 | username.length() ==0 
               | password.length()==0){
           //display error message
           lblAddNewParticipantError.setText("Please fill in all blanks");
       }
       else{
           /*Declare boolan value letter check to check name and usrname 
           contains letter only*/
           boolean LetterCheck = true;
       
           //check name only consist of letter
           for(int i = 0; i<name.length() ; i++){
               if(Character.isLetter(name.charAt(i)) == false){
                    LetterCheck = false;
                    lblAddNewParticipantError.setText("Please enter letter only in name");
                }
            }
           
            if(LetterCheck==true){
                //check surname consist of letter
                for(int i = 0; i<surname.length() ; i++){
                    if(Character.isLetter(surname.charAt(i))==false){
                         LetterCheck = false;
                         lblAddNewParticipantError.setText("Please enter letter only in surname");
                    }
                }
            }  
           if(LetterCheck == true){
                try{
                /*Extract participant usernames in the database and 
                    save them in the string array*/ 
                ResultSet rs = CompetitionManager.db.queryDB
                ("SELECT * FROM tblParticipant;");
                while(rs.next()){
                    d[size] = rs.getString("PpUsername");
            
                    //increase size value when new record is added in the string array
                    size++;
                }
        
                /*Test if username which is typed by user is equal to 
                any usernames in the database*/
                for(int i = 0; i<size ; i++){
                    if(username.equalsIgnoreCase(d[i])){
                         check = false;
                    }   
                }
       
            //Add participant only when test is passed
            if(check == true){
            try{
                CompetitionManager.db.changeDB("INSERT INTO tblParticipant"
                        + "(PpName,PpSurname, PpUsername, PpPassword) "
                        + "VALUES ('"  + name + "', '" + surname + "', '" + 
                        username + "', '" + password + "')");
           
                //set label to show participant added
                lblAddNewParticipantError.setText("Participant added");
           
                //Empty the text field
                 txfName.setText("");
                txfSurname.setText("");
                txfUsername.setText("");
                pwfPassword.setText("");
           
            }catch(SQLException ex){
                //display error message
                lblAddNewParticipantError.setText("Cannot add new participant");
       }
       }else {
                //display error message
                lblAddNewParticipantError.setText("Invalid username");}
       }catch(SQLException e){
           //display error message
           lblAddNewParticipantError.setText("Cannot add new participant");
       }
       }
       
       
       }
    }//GEN-LAST:event_btnAddParticipantActionPerformed

    private void btnShowAllCompetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllCompetitionsActionPerformed
        // TODO add your handling code here:
        //Declare the competition array to store competition object
        Competition competition[] = new Competition[1000];
        
        //Declare and initialise variables
        int size = 0;
        String t, l;
        int cID , p;
        String d;
        
        
        try{
        //Extract data from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT * FROM tblCompetition;");
        
        //store data from database into competition array
        while(rs.next()){
            cID = Integer.parseInt(rs.getString("CpID"));
            t = rs.getString("CpTitle");
            l = rs.getString("CpLocation");
            p = Integer.parseInt(rs.getString("CpPrize"));
            d = (rs.getString("CpDate")).substring(0,10);
            
           //Add new objects into cometition array
            competition[size] = new Competition(cID, t, l, p, d);
            size++;
        }
        
        //set column name in the first line
        String temp = "";
        temp+= "ID" + addSpaces("ID",5) +
                "Title" + addSpaces("Title",35) + 
                "Location" + addSpaces("Location",35) +
                "Prize" + addSpaces("Prize", 10)+
                "Date";
        temp += "\n" + "\n";
        
        //add competition details in the temp
        for(int i = 0; i < size; i++){
            
            if(competition[i] != null){
                temp += competition[i].getCpID() + addSpaces(String.valueOf(competition[i].getCpID()), 5);
                temp += competition[i].getCpTitle() + addSpaces(competition[i].getCpTitle(), 35);
                temp += competition[i].getCpLocation() + addSpaces(String.valueOf(competition[i].getCpLocation()), 35);
                temp += competition[i].getCpPrize() + addSpaces(String.valueOf(competition[i].getCpPrize()), 10);
                temp += competition[i].getCpDate();
            }
            temp += "\n";
        
        }
            //DIsplay competition details
            txaViewCompetitions.setText(temp);
            
        }catch(SQLException ex){
            //display error messages
            lblViewCompetitionsError.setText("Cannot load the data");
        }
    }//GEN-LAST:event_btnShowAllCompetitionsActionPerformed

    private void btnAddCompetitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCompetitionActionPerformed
        // TODO add your handling code here:
        //Get input user typed
            String title = txfTitle.getText();
            String location = String.valueOf(cmbLocation.getSelectedItem());
            String Prize = txfPrize.getText();
            LocalDate dd = dpkDate.getDate();
            int checkDigit = 0;
            
            //Check user typed at least one character
            if(title.length()==0 | location.length() == 0 | Prize.length() ==0 | dd == null){
           lblAddNewCompetitionError.setText("Please fill in all blanks");
        }else{
            for(int i = 0; i<Prize.length(); i++){
                //check the field contain letter
                if(Character.isDigit(Prize.charAt(i))){
                    
                }else{
                    //increase value of checkDigit if Prize field contains letter
                    checkDigit++;
                    
                    //Display error message
                    lblAddNewCompetitionError.setText("Please enter digit only in prize");
                    
                }
            }
            int prize = Integer.parseInt(Prize);
            
            
            if(checkDigit==0){
            try{
                //Insert new data on the database
                CompetitionManager.db.changeDB( "INSERT INTO tblCompetition(CpTitle, CpLocation, CpPrize, CpDate) VALUES('" + title + "', '" + location + "', " + Prize +  ", '" + dd  + "')" );
                
                //Display message to show competition added
                lblAddNewCompetitionError.setText("Competition added");
                
                
            }catch(SQLException ex){
                //Display error message
                lblAddNewCompetitionError.setText("Cannot add new competition");
            }
                    
           }
            }
    }//GEN-LAST:event_btnAddCompetitionActionPerformed

    private void btnShowAllParticipantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllParticipantsActionPerformed
        // TODO add your handling code here:
        //Declare and initialise variable
        String temp = "";
        
        //Declare participant array
        Participant participant[] = new Participant[500];
        int size = 0;
         try{
                //Extract data from database
                ResultSet rs = CompetitionManager.db.queryDB("SELECT *" + " FROM tblParticipant " + "ORDER BY PpSurname" );
                
                //Set the first line as column name
                temp += "ID" + addSpaces("ID",8) + 
                        "Name" + addSpaces("Name",20) + 
                        "Surname" + addSpaces("Surname", 20) + 
                        "Username" + addSpaces("Username", 25) + 
                        "Password" + "\n" + "\n";
                
                //Add participant object to participant array
                while(rs.next()){
                    int id = rs.getInt("PpID");
                    String name = rs.getString("PpName");
                    String surname = rs.getString("PpSurname");
                    String username = rs.getString("PpUsername");
                    String password = rs.getString("PpPassword");
                    
                    participant[size]= new Participant(id,name,surname,username,password);
                    size++;
                           
                }
                
                //Add participant details in the next line
                for(int i = 0; i<size; i++){
                if(participant[i]!= null){
                        temp += participant[i].getPpID() + addSpaces("" + participant[i].getPpID(),8)
                                +participant[i].getPpName()+ addSpaces(participant[i].getPpName(),20) 
                                +participant[i].getPpSurname()+ addSpaces(participant[i].getPpSurname(),20)
                                + participant[i].getPpUsername()+ addSpaces(participant[i].getPpUsername(),25)
                                +participant[i].getPpPassword()
                                +"\n";
                    }
                }
            //Display participant details at the text area
            txaShowAllParticipants.setText(temp);
            }catch(SQLException ex){
                //Display error message
                lblViewParticipantsError.setText("Cannot access to participants");
            }
    }//GEN-LAST:event_btnShowAllParticipantsActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        //Get input typed by user
        int CpID = Integer.parseInt(txfCompetitionID.getText());
        int PpID = Integer.parseInt(txfNewParticipantID.getText());
        
        //Declare boolean variables
        boolean check = false;
        boolean check2 = false;
        
        try{
            //Extract data from database
            ResultSet rs = CompetitionManager.db.queryDB("SELECT * FROM tblResult WHERE tblResult.CpID = " + CpID);
            
            //Extract all participant in the database
            ResultSet rs2 = CompetitionManager.db.queryDB("SELECT * FROM tblParticipant");
            
            //Extract all competition in the database
            ResultSet comp = CompetitionManager.db.queryDB("SELECT * FROM tblCompetition");
            
            //Check competition is in the databse
            while(comp.next()){
                int competitionID = Integer.parseInt(comp.getString("CpID"));
                if(competitionID == CpID){
                    check = true;
                }
            }
            
            
            //Only when competition is on the list
            if(check == true){
            
            //Check participant is on the list
            while(rs2.next()){
               int participantID = Integer.parseInt(rs2.getString("PpID"));
               if(participantID == PpID){
                   check2 = true;
               }
            }
            
            //check whether participant is already added on the list
            while(rs.next()){
               int participantID = Integer.parseInt(rs.getString("PpID"));
               if(participantID == PpID){
                   check= false;
               }
            }
            
            
            //Add participant only when participant is on the participant table but not on the result table
            if(check == true & check2 == true){
            CompetitionManager.db.changeDB("INSERT INTO tblResult(CpID, PpID, TotalPoints) VALUES ( " + CpID + ", " + PpID + ", 0)");
            txfCompetitionID.setText("");
            txfNewParticipantID.setText("");
            txaCheckAllParticipants.setText("");
            
            //Display message to show participant added
            lblAddParticipantsToCompetitionsError.setText("Participant added");
            }else{
                //Display error message if participant is not in the table participant
                lblAddParticipantsToCompetitionsError.setText("Invalid Participant ID");} 
            }else{
                //Display error message if competition is not in the table competition
                lblAddParticipantsToCompetitionsError.setText("Invalid Competition ID");}
        
        }catch(SQLException ex){
            //Display error message if inserting the data on the database is not available
            lblAddParticipantsToCompetitionsError.setText("Cannot add participants to competition");
                }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //Get input typed by user
        int CpID = Integer.parseInt(txfCompetitionID1.getText());
        int ppID = Integer.parseInt(txfParticipantID1.getText());
        
        //Declare variables
        int temp;
        test = false;
        
        //Clear the label
        lblUpdateResultsError.setText("");
        try{
        //Extract data from database
        ResultSet allCompID = CompetitionManager.db.queryDB("SELECT * FROM tblCompetition");
        
        //Declare array to store all competitions' ID in database
        int[] allComp = new int[1000];
        int size =0;
        
        //save competition ID into allComp array
        while(allCompID.next()){
            allComp[size] = allCompID.getInt("CpID");
            size++;
        }
        
        //check Competition ID exist
        boolean check = false;
        for(int i = 0; i<size ; i++){
            if(allComp[i] == CpID){
                check = true;
            }
        }
        
        //execute only when competition exits
        if(check == true){
            
        //Extract data from database
        ResultSet rs = CompetitionManager.db.queryDB
        ("SELECT PpID FROM tblResult WHERE tblResult.CpID = " + CpID);
        
        
        //Set temp as participant ID from database
        while(rs.next()){
        temp = Integer.parseInt(rs.getString("PpID"));
        
        //Check temp is equal to Participant ID
        if(temp == ppID){
                test = true;
            } 
        }
      
        //if participant is already added on the database
        if(test == true){
             //Get input typed by user
        int CID = Integer.parseInt(txfCompetitionID1.getText());
        int PID = Integer.parseInt(txfParticipantID1.getText());
        int points = Integer.parseInt(txfPoints.getText());
        
            //check value in the points field is greater than 70
            if(points > 70){
            
            //Update Totalpoints of participant in the table Results
            CompetitionManager.db.changeDB("Update tblResult SET TotalPoints = " 
                    + points + " WHERE CpID = "+ CID + " AND PpID = " 
                    + PID + ";");
            
            //Display message to show result updated
            lblUpdateResultsError.setText("Result updated");
            
            //clear the text field
            txfCompetitionID1.setText("");
            txfParticipantID1.setText("");
            txfPoints.setText("");
            
            //set test as false
            test = false;
            }else{
                //Display error message if the value of points field is smaller than 70
                lblUpdateResultsError.setText("Points should be bigger than 70");
            }
        
            
        
        }else{
            
            //Display error message
            lblUpdateResultsError.setText("Invalid participant ID");
            
        }
        }else{
             //Display error message
            lblUpdateResultsError.setText("Invalid Competition ID");
        }
        
                }catch(SQLException ex){
                    lblUpdateResultsError.setText("cannot alter database");
                }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        //Clear test area
        txaBestParticipants.setText("");
        
        //Get input typed by user
        int cID = Integer.parseInt(txfCompetitionID2.getText());
        
        try{
            //Declare and initialise variables
            String temp = "";
            int num = 0;
            int number = 0;
            
            
            //check whether there are participants registered in the comeptition
            ResultSet rsss = CompetitionManager.db.queryDB
        ("SELECT COUNT(*) AS COUNT  FROM tblResult GROUP BY CpID HAVING CpID = "
                + cID );
            
            while(rsss.next()){
             number = rsss.getInt("Count");
            }
            
            //execute only when there is at least one participants in the list
            if(number>0){
            
            //Extract 3 highest points in database    
            ResultSet rss = CompetitionManager.db.queryDB
        ("SELECT TOP 3 TotalPoints FROM tblResult WHERE CpID = "+ cID 
                + " GROUP BY TotalPoints ORDER BY TotalPoints DESC");
            
            String[] topScore = new String[3];
            int size = 0;
            
            while(rss.next()){
            topScore[size] = rss.getString("TotalPoints");
            
            size++;
            
            }
              
            //Set first line as name of column
            temp+= "TOP" + addSpaces("TOP", 5) + "Name" +  addSpaces("Name",15) 
                    + "ID" + addSpaces("ID",5)+ "Score" + " \n" + "\n";
            
            //Extract data from database
            ResultSet rsTop1 = CompetitionManager.db.queryDB
        ("SELECT * FROM tblParticipant, tblResult  WHERE tblParticipant.PpID = "
                + "tblResult.PpID AND tblResult.CpID = " + cID + 
                " AND TotalPoints = " + topScore[0] );
            
            //Add first place participant/s in the first line
            while(rsTop1.next()){
                temp += "1" + addSpaces(String.valueOf("1"), 5) 
                        + rsTop1.getString("PpName") 
                        + addSpaces(rsTop1.getString ("PpName"),15) + 
                        rsTop1.getString("PpID") 
                        + addSpaces(rsTop1.getString("PpID"),5)
                        +rsTop1.getString("TotalPoints") + "\n";
       
            }
            
            
            //execute only when there are second place participants
            if(size>1){
                //Add second place participant/s in the first line
            ResultSet rsTop2 = CompetitionManager.db.queryDB("SELECT * "
                    + "FROM tblParticipant, tblResult  WHERE "
                    + "tblParticipant.PpID = tblResult.PpID AND "
                    + "tblResult.CpID = " + cID + " AND TotalPoints = " 
                    + topScore[1] );
            
             while(rsTop2.next()){
                temp += "2" + addSpaces(String.valueOf("2"), 5) 
                        + rsTop2.getString("PpName") 
                        + addSpaces(rsTop2.getString("PpName"),15) + 
                        rsTop2.getString("PpID") 
                        + addSpaces(rsTop2.getString("PpID"),5)
                        +rsTop2.getString("TotalPoints") + "\n";
       
            }
            }
            //execute only when there are third place participants
            if(size>2){
            ResultSet rsTop3 = CompetitionManager.db.queryDB("SELECT * FROM "
                    + "tblParticipant, tblResult  WHERE tblParticipant.PpID = "
                    + "tblResult.PpID AND tblResult.CpID = " + cID + 
                    " AND TotalPoints = " + topScore[2] );
            
            //Add third place participant/s in the first line
            while(rsTop3.next()){
                temp += "3" + addSpaces(String.valueOf("3"), 5) 
                        + rsTop3.getString("PpName") 
                        + addSpaces(rsTop3.getString("PpName"),15) + 
                        rsTop3.getString("PpID") 
                        + addSpaces(rsTop3.getString("PpID"),5)
                        +rsTop3.getString("TotalPoints") + "\n";
       
            }
            }
            //display outcome
            txaBestParticipants.setText(temp);
            
            
            
            }else{
                //display error message
                lblViewBestParticipantsError.setText("There is no result in this competition");
            } 
        }catch(SQLException ex){
            //Display error message if extracting data is unavaliable 
            lblViewBestParticipantsError.setText("Cannot load top achievers");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnHelpViewCompetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpViewCompetitionsActionPerformed
        // TODO add your handling code here:
        //Get the topic user choose
        String topic = evt.getActionCommand();
        try{
        //Extract description which is matched with the topic from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
        rs.next();
        String d = rs.getString("Description");
        
        //Display description
        txaHelp.setText(d);
        
        }catch(SQLException ex){
         //Display error message
         lblHelpError.setText("Cannot access Help");
        }
    }//GEN-LAST:event_btnHelpViewCompetitionsActionPerformed

    private void btnHelpViewParticipantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpViewParticipantsActionPerformed
        // TODO add your handling code here:
        //Get the topic user choose
        String topic = evt.getActionCommand();
        try{
        //Extract description which is matched with the topic from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
        rs.next();
        
        //Display description
        String d = rs.getString("Description");
        txaHelp.setText(d);
        
        }catch(SQLException ex){
        //Display error message 
        lblHelpError.setText("Cannot access Help");
        }
    }//GEN-LAST:event_btnHelpViewParticipantsActionPerformed

    private void btnHelpAddParticipantsToCompetitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpAddParticipantsToCompetitionsActionPerformed
        // TODO add your handling code here:
        //Get the topic user choose
        String topic = evt.getActionCommand();
        try{
        //Extract description which is matched with the topic from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
        rs.next();
        
        //Display description
        String d = rs.getString("Description");
        txaHelp.setText(d);
        }catch(SQLException ex){
         //Display error message 
         lblHelpError.setText("Cannot access Help");
        } 
    }//GEN-LAST:event_btnHelpAddParticipantsToCompetitionsActionPerformed

    private void btnHelpUpdateResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpUpdateResultsActionPerformed
        // TODO add your handling code here:
        //Get the topic user choose
        String topic = evt.getActionCommand();
        try{
        //Extract description which is matched with the topic from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
        rs.next();
        
        //Display description
        String d = rs.getString("Description");
        txaHelp.setText(d);
        }catch(SQLException ex){
         //Display error message 
         lblHelpError.setText("Cannot access Help");
        }
    }//GEN-LAST:event_btnHelpUpdateResultsActionPerformed

    private void btnHelpViewBestParticipantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpViewBestParticipantsActionPerformed
        // TODO add your handling code here:
        //Get the topic user choose
        String topic = evt.getActionCommand();
        try{
        //Extract description which is matched with the topic from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT Description FROM tblHelp WHERE Problem = " + " '" + topic + "';");
        rs.next();
        
        //Display description
        String d = rs.getString("Description");
        txaHelp.setText(d);
        }catch(SQLException ex){
         //Display error message 
         lblHelpError.setText("Cannot access Help");
        }
    }//GEN-LAST:event_btnHelpViewBestParticipantsActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        // TODO add your handling code here:
        //Get input typed by user
        int CpID = Integer.parseInt(txfCompetitionID.getText());
        
        
        //Declare and initialise variable
        String temp = "";
        try{
            
        ResultSet allCompID = CompetitionManager.db.queryDB
        ("SELECT * FROM tblCompetition");
        
        int[] allComp = new int[1000];
        int size =0;
        while(allCompID.next()){
            allComp[size] = allCompID.getInt("CpID");
            size++;
        }
        boolean check = false;
        
        //check competition ID exists
        for(int i = 0; i<size ; i++){
            if(allComp[i] == CpID){
                check = true;
            }
        }
        
        //execute only when competition ID exists
        if(check == true){
        //Extract data from database
        ResultSet rs = CompetitionManager.db.queryDB("SELECT PpID FROM tblResult WHERE tblResult.CpID = " + CpID + " ORDER BY PpID");
        
        int number =0;
        
        //Add participant ID to output
        while(rs.next()){
        int i = Integer.parseInt(rs.getString("PpID"));
        temp += i + "\n";
        number++;
        
        }
        
        if(number==0){
            //display error message
            temp = "**//There is no participant who registered in competiton//**";
        }
        //Display output
        txaCheckAllParticipants.setText(temp);
        }else{
            txaCheckAllParticipants.setText("");
            JOptionPane.showMessageDialog(null,"Invalid competition ID");
        }
        
                }catch(SQLException ex){
                    txaCheckAllParticipants.setText("");
                    //Display error message
                    JOptionPane.showMessageDialog(null,"cannot load the data");
                }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        //Display new Log On interface
        new LogOnGUI().setVisible(true);
        //Set Main interface invisible
        this.dispose();
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txfCompetitionID2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCompetitionID2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCompetitionID2KeyReleased

    private void txfCompetitionID2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCompetitionID2KeyTyped
        // TODO add your handling code here:
        btnSearch.setEnabled(true);
    }//GEN-LAST:event_txfCompetitionID2KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddCompetition;
    private javax.swing.JButton btnAddParticipant;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnHelpAddNewParticipant;
    private javax.swing.JButton btnHelpAddParticipantsToCompetitions;
    private javax.swing.JButton btnHelpUpdateResults;
    private javax.swing.JButton btnHelpViewBestParticipants;
    private javax.swing.JButton btnHelpViewCompetitions;
    private javax.swing.JButton btnHelpViewParticipants;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowAllCompetitions;
    private javax.swing.JButton btnShowAllParticipants;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbLocation;
    private com.github.lgooddatepicker.components.DatePicker dpkDate;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblAddNewCompetitionError;
    private javax.swing.JLabel lblAddNewParticipantError;
    private javax.swing.JLabel lblAddParticipantsToCompetitionsError;
    private javax.swing.JLabel lblBackground1;
    private javax.swing.JLabel lblBackground2;
    private javax.swing.JLabel lblBackground3;
    private javax.swing.JLabel lblBackground5;
    private javax.swing.JLabel lblBackground6;
    private javax.swing.JLabel lblBackground7;
    private javax.swing.JLabel lblBackground8;
    private javax.swing.JLabel lblBaground4;
    private javax.swing.JLabel lblCompetitionID;
    private javax.swing.JLabel lblCompetitionID1;
    private javax.swing.JLabel lblCompetitionID2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblHelpError;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNewParticipationID;
    private javax.swing.JLabel lblParticipantID1;
    private javax.swing.JLabel lblPoints;
    private javax.swing.JLabel lblPrize;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUpdateResultsError;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblViewBestParticipantsError;
    private javax.swing.JLabel lblViewCompetitionsError;
    private javax.swing.JLabel lblViewParticipantsError;
    private javax.swing.JPanel pnlAddNewCompetition;
    private javax.swing.JPanel pnlAddNewParticipant;
    private javax.swing.JPanel pnlAddParticipantsToCompetitions;
    private javax.swing.JPanel pnlHelp;
    private javax.swing.JPanel pnlLogOut;
    private javax.swing.JPanel pnlUpdateResults;
    private javax.swing.JPanel pnlViewBestParticipants;
    private javax.swing.JPanel pnlViewCompetitions;
    private javax.swing.JPanel pnlViewParticipants;
    private javax.swing.JPasswordField pwfPassword;
    private javax.swing.JTabbedPane tabTableTennis;
    private javax.swing.JTextArea txaBestParticipants;
    private javax.swing.JTextArea txaCheckAllParticipants;
    private javax.swing.JTextArea txaHelp;
    private javax.swing.JTextArea txaShowAllParticipants;
    private javax.swing.JTextArea txaViewCompetitions;
    private javax.swing.JTextField txfCompetitionID;
    private javax.swing.JTextField txfCompetitionID1;
    private javax.swing.JTextField txfCompetitionID2;
    private javax.swing.JTextField txfName;
    private javax.swing.JTextField txfNewParticipantID;
    private javax.swing.JTextField txfParticipantID1;
    private javax.swing.JTextField txfPoints;
    private javax.swing.JTextField txfPrize;
    private javax.swing.JTextField txfSurname;
    private javax.swing.JTextField txfTitle;
    private javax.swing.JTextField txfUsername;
    // End of variables declaration//GEN-END:variables
}
